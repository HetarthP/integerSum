
//Description: this is a program where a user can enter integer whole numbers into 
//a list and can do a variety of different functions with their list such as adding
//or summing all the even or odd numbers and sorting it least to greatest, averages
//etc. 



package ovs.u2l1.integersums;
import java.util.ArrayList; // For using arrays to store integers

// Import classes for creating GUI components
import javax.swing.JOptionPane; // For dialog pop-ups to show messages basically
import javax.swing.JTextArea; // For displaying text in a multi-line area
import javax.swing.*; // For using all Swing components (e.g., JButton, JFrame, etc.)
import java.awt.*; // For using layout managers and color options is what its for
import java.util.Collections; // For sorting and other collection stuff

// Import classes for using timers and event handling (my live validation imports)
import javax.swing.Timer; // For creating timed events
import javax.swing.border.LineBorder; // To create borders on components
import javax.swing.event.DocumentEvent; // To handle document change events
import javax.swing.event.DocumentListener; // To listen to changes in text documents

/**
 *
 * @author user
 */
public class integerSums extends javax.swing.JFrame {
    
    
    private void resetTextColor() {
    // Create a timer to reset the color after 1.5 seconds
    Timer timer = new Timer(1500, e -> {
        textResult.setForeground(Color.BLACK); //This will make it go back to 
                                               //the original color
    });
    
    // Ensure the timer only runs once every single time is what its saying
    timer.setRepeats(false);
    
    //This will start the timer
    timer.start();
    
    
}
    public integerSums() {
        initComponents();
        // Add DocumentListener for a live input validation
        textInt.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            //This is the method called when the text is inserted
            public void insertUpdate(DocumentEvent e) {
                validateInput();
            }
            //This is the method called when the text is removed
            @Override
            public void removeUpdate(DocumentEvent e) {
                validateInput();
            }
            //This is the method called when theres basically any changes in the
            //document
            @Override
            public void changedUpdate(DocumentEvent e) {
                validateInput();
            }
        });
    }

    private void validateInput() {
        String input = textInt.getText();
        
        //This function basically checks if the input is a valid integer
        try {
            Integer.parseInt(input);
            // If valid, this will set the border to green
            textInt.setBorder(new LineBorder(Color.GREEN, 2));
        } catch (NumberFormatException e) {
            // If invalid, this will set the border to red
            textInt.setBorder(new LineBorder(Color.RED, 2));
        }
    
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        textInt = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnAll = new javax.swing.JButton();
        btnEven = new javax.swing.JButton();
        btnOdd = new javax.swing.JButton();
        textResult = new javax.swing.JTextField();
        btnExit = new javax.swing.JButton();
        btnList = new javax.swing.JButton();
        listThing = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        btnSort = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnAverage = new javax.swing.JButton();
        btnClearInt = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        btnE = new javax.swing.JButton();
        btnO = new javax.swing.JButton();
        btnCLR = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel2.setText("Integer Sums");

        jLabel3.setText("Enter an integer");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnAll.setText("Sum All");
        btnAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllActionPerformed(evt);
            }
        });

        btnEven.setText("Sum Even");
        btnEven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEvenActionPerformed(evt);
            }
        });

        btnOdd.setText("Sum Odd");
        btnOdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOddActionPerformed(evt);
            }
        });

        textResult.setEditable(false);
        textResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textResultActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnList.setText("List");
        btnList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(204, 255, 255));
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        listThing.setViewportView(jTextArea1);

        btnSort.setText("Sort");
        btnSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortActionPerformed(evt);
            }
        });

        btnClear.setText("Clear List");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnAverage.setText("Average");
        btnAverage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAverageActionPerformed(evt);
            }
        });

        btnClearInt.setText("Clear Input field");
        btnClearInt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearIntActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("Filters");

        btnE.setText("Even");
        btnE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEActionPerformed(evt);
            }
        });

        btnO.setText("Odd");
        btnO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOActionPerformed(evt);
            }
        });

        btnCLR.setText("Clear Filters");
        btnCLR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCLRActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnO, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(textResult, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(jLabel5)
                                    .addGap(182, 182, 182)
                                    .addComponent(jLabel2)
                                    .addGap(138, 138, 138)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(16, 16, 16)
                                    .addComponent(btnE, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(listThing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(78, 78, 78)
                                .addComponent(btnClearInt))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(31, 31, 31)
                                .addComponent(textInt, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(303, 303, 303)
                                        .addComponent(jLabel1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(70, 70, 70)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(btnAll, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(btnOdd))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(18, 18, 18)
                                                        .addComponent(btnAverage, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(18, 18, 18)
                                                        .addComponent(btnEven, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addGap(18, 18, 18)
                                                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                                                    .addComponent(btnSort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(btnClear, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(btnList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))))))
                        .addGap(12, 12, 12)
                        .addComponent(btnCLR)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 41, Short.MAX_VALUE)
                                .addComponent(jLabel4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAdd)
                        .addComponent(btnRemove))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(textInt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(listThing, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAll)
                            .addComponent(btnEven, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnOdd)
                            .addComponent(btnAverage))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSort)
                            .addComponent(btnClear))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnExit)
                            .addComponent(btnList))
                        .addGap(33, 33, 33)
                        .addComponent(btnClearInt))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(btnO)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCLR)))
                .addGap(43, 43, 43)
                .addComponent(textResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 108, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private ArrayList<Integer> integerList = new ArrayList<>();
    
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
         try {
        //This function parses the integer from the textInt field
        int number = Integer.parseInt(textInt.getText());
        
        //This will add the number to the list
        integerList.add(number);
        
        //THis function just updates the list display
        updateListDisplay();
        
        //This will basically show the user what number got added and make the text green
        textResult.setText("Number added: " + number);
        textResult.setForeground(Color.GREEN); //This sets the text color to green
        
        //This will reset to the default color after 1.5 seconds
        resetTextColor();
        
    } catch (NumberFormatException e) {
        // Show an error message if the input is not a valid integer
        JOptionPane.showMessageDialog(this, "Please enter a valid integer.");
        
        //This will set the error message in textResult and make the text red
        textResult.setText("Invalid input: Please enter a valid integer.");
        textResult.setForeground(Color.RED); // Set the text color to red
        
        // Reset to default color after 1.5 seconds
        resetTextColor();
    }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        try {
        //This will parse the integer from the textInt text field
        int number = Integer.parseInt(textInt.getText());
        
        //This will basically check if the actual list contains the integer
        if (integerList.contains(number)) {
            // Remove the number from the list
            integerList.remove(Integer.valueOf(number));
            
            //This will update the list display
            updateListDisplay();
            
            // Show user the number removal and make the text green
            textResult.setText("Number removed: " + number);
            textResult.setForeground(Color.GREEN); // Set the text color to green
            
        } else {
            // If the number is not found in the list show user this message
            textResult.setText("Number not found.");
            textResult.setForeground(Color.RED); // Set the text color to red
        }
        
        // Reset to default color after 1.5 seconds
        resetTextColor();
        
    } catch (NumberFormatException e) {
        // If the input is not valid, catch the NumberFormatException
        JOptionPane.showMessageDialog(this, "Please enter a valid integer to remove.");
        
        //This will just display an error message and set the text color to red
        textResult.setText("Invalid input: Please enter a valid integer to remove.");
        textResult.setForeground(Color.RED); // Set the text color to red
        
        // Reset to default color after 1.5 seconds
        resetTextColor();
    }
        
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllActionPerformed
        // TODO add your handling code here:
        //Sets a variable to stores all the numbers added
         int sum = 0;

    // This function checks if the list is empty
    if (integerList.isEmpty()) {
        // If empty, show an error message and set textResult color to red
        JOptionPane.showMessageDialog(this, "Error: Nothing to sum.", "Error", JOptionPane.ERROR_MESSAGE);
        textResult.setText("Error: Nothing to sum.");//This displays error message
        textResult.setForeground(Color.RED); //This will set the text color to red
    } else {
        // Loop through all the numbers if the list is not empty
        for (int num : integerList) {
            sum += num; // Add the numbers to the sum
        }
        // Display the total sum and set textResult color to green
        textResult.setText("Sum of all numbers: " + sum); // Display the total sum
        textResult.setForeground(Color.GREEN);//This will set the text color to green
        resetTextColor();//Reset after 1.5 seconds 
    }
        
    }//GEN-LAST:event_btnAllActionPerformed

    private void btnEvenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEvenActionPerformed
        // TODO add your handling code here:
         // Initialize the sumEven variable to store the sum of all the even numbers
    int sumEven = 0;
    boolean hasEven = false; // A flag to check if there are any even numbers

    // This function just checks if the list is empty
    if (integerList.isEmpty()) {
        // If empty, show an error message and set textResult color to red
        JOptionPane.showMessageDialog(this, "Error: Nothing to sum yet.", "Error", JOptionPane.ERROR_MESSAGE);
        textResult.setText("Error: Nothing to sum.");
        textResult.setForeground(Color.RED); // Set text color to red
    } else {        
        // Then it will loop through each number in the list and iterates over each num in the list
        for (int num : integerList) {
            // Then it checks if a number is even if the remainder when you divide a number by 2 is 0
            if (num % 2 == 0) {
                sumEven += num; // Add to sumEven if it's even
                hasEven = true; // Set the flag to true if an even number is found
            }
        }

        // Check if there were any even numbers
        if (hasEven) {
            // Display the sum in the text field if there are even numbers
            textResult.setText("Sum of even numbers: " + sumEven);
            textResult.setForeground(Color.GREEN); // Set text color to green
        } else {
            // If no even numbers were found, display an error message
            textResult.setText("No even numbers to sum.");
            textResult.setForeground(Color.RED); // Set text color to red
        }

        resetTextColor(); // Reset the color after 1.5 seconds
    }
    }//GEN-LAST:event_btnEvenActionPerformed

    private void btnOddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOddActionPerformed
        // TODO add your handling code here:
        //Initialize the sumOdd variable to store the sum of all the odd numbers
    //is what its saying
    int sumOdd = 0;
    boolean hasOdd = false; //Sets a variable to track if there are any odd numbers

    //Check if the list is empty
    if (integerList.isEmpty()) {
        //If the list is empty, show an error message and turn text red
        textResult.setText("Error: Nothing to sum.");
        textResult.setForeground(Color.RED); // Set the text color to red
    } else {
        //Then it will loop through each number in the list and iterates over each
        //num in the list 
        for (int num : integerList) {
            //Then it checks if a number is odd if the remainder when you divide a 
            //number by 2 is not zero
            if (num % 2 != 0) {
                sumOdd += num; //Then if it's odd, just add it to the sumOdd variable
                hasOdd = true; // Set the flag to true if an odd number is found
            }
        }
        
        if (hasOdd) {
            //If there are odd numbers, show the sum and set the text color to green
            textResult.setText("Sum of odd numbers: " + sumOdd);
            textResult.setForeground(Color.GREEN); // Set the text color to green
        } else {
            //If no odd numbers were found, show a message and set text color to red
            textResult.setText("No odd numbers found.");
            textResult.setForeground(Color.RED); // Set the text color to red
            resetTextColor();//Reset after 1.5 seconds
        }
    }
    }//GEN-LAST:event_btnOddActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed
    private void updateListDisplay() {
     jTextArea1.setText(""); // Clear previous text
    for (int num : integerList) {
         jTextArea1.append(num + "\n"); // Append each number
    }
    }
    private void btnListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListActionPerformed
        // TODO add your handling code here:
        //Check if the list is empty
        if (integerList.isEmpty()) {
        //if it is then show a message saying there's no numbers in the list
        textResult.setText("No numbers in the list.");
    } else {
        //Otherwise display to the user what the numbers in your list are
        textResult.setText("Numbers: " + integerList.toString());
    }
    }//GEN-LAST:event_btnListActionPerformed

    private void btnSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortActionPerformed
        // TODO add your handling code here:
         if (integerList.isEmpty()) {
        // If the list is empty, show a message to let the user know 
        JOptionPane.showMessageDialog(this, "No numbers to sort.", "Error", JOptionPane.ERROR_MESSAGE); 
        textResult.setText("No numbers to sort.");
        textResult.setForeground(Color.RED); // Set text color to red for error
    } else {
        // Sort the list from least to greatest if it's not empty
        Collections.sort(integerList);
        updateListDisplay(); // Update the display after sorting it out 
        textResult.setText("Numbers sorted successfully.");
        textResult.setForeground(Color.GREEN); // Set text color to green
        resetTextColor();//Reset after 1.5 seconds
    }
    }//GEN-LAST:event_btnSortActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        if (integerList.isEmpty()) {
        // Show a message if the list is already empty
        JOptionPane.showMessageDialog(this, "Already Cleared.");
    } else {
        // Clear the list and show a message
        integerList.clear();               // Clear the list
        updateListDisplay();               // Update list display to reflect changes
        textResult.setText("List cleared.");  // Display confirmation message
        textResult.setForeground(Color.GREEN); // Optional: Set text to green for confirmation
    }
    
    // Note: We do not clear the input field since it's unrelated to the list.                      
       
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnAverageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAverageActionPerformed
        // TODO add your handling code here:
        //Check if the list is empty
    if (integerList.isEmpty()) {
        // If it's empty, pop up this message to say there's nothing to average
        JOptionPane.showMessageDialog(this, "No numbers to calculate the average.", "Error", JOptionPane.ERROR_MESSAGE);
        textResult.setForeground(Color.RED); // Set text color to red for error
        textResult.setText("No numbers to calculate the average.");
    } else {
        // Create a variable sum = 0
        int sum = 0;
        // Then loop through each number in the list 
        // Each num is then added to the sum in the iterations 
        for (int num : integerList) {
            sum += num;
        }
        // This then calculates the average by dividing the total sum by the size
        // of the list or however many numbers there are
        double average = (double) sum / integerList.size();
        textResult.setText("Average of numbers: " + average); // Display the average
        textResult.setForeground(Color.GREEN); // Set text color to green
        resetTextColor();//Reset after 1.5 seconds
    }
    }//GEN-LAST:event_btnAverageActionPerformed

    private void textResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textResultActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textResultActionPerformed

    private void btnClearIntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearIntActionPerformed
        // TODO add your handling code here:
        if (textInt.getText().isEmpty() && integerList.isEmpty()) {
        // Show a message if there's nothing to clear
        JOptionPane.showMessageDialog(this, "Already Cleared.");
    } else {
        
        textInt.setText("");                                               
    } 
    }//GEN-LAST:event_btnClearIntActionPerformed

    private void btnEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEActionPerformed
        // TODO add your handling code here:
        //Clear the text result field
        textResult.setText(""); 
        StringBuilder evenNumbers = new StringBuilder();

    // Loop through the integerList and append even numbers to the StringBuilder
    for (int num : integerList) {
        if (num % 2 == 0) {
            evenNumbers.append(num).append("\n");
        }
    }

    //This will get the JTextArea from the JScrollPane and display the filtered even numbers
    JTextArea textArea = (JTextArea) ((JScrollPane) listThing).getViewport().getView();
    
    // Display the filtered even numbers in the JTextArea
    if (evenNumbers.length() > 0) {
        textArea.setText(evenNumbers.toString()); // Set text to JTextArea
    } else {
        textArea.setText("No even numbers found."); // Display message if none found
    }
    
    
        
    }//GEN-LAST:event_btnEActionPerformed

    private void btnOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOActionPerformed
        // TODO add your handling code here:
        //Clear the text result field
        textResult.setText("");
        
        StringBuilder oddNumbers = new StringBuilder();

    // Loop through the integerList and then append odd numbers to the StringBuilder
    for (int num : integerList) {
        if (num % 2 != 0) {
            oddNumbers.append(num).append("\n");
        }
    }

    // Retrieve the JTextArea from the JScrollPane and display the filtered odd numbers
    JTextArea textArea = (JTextArea) ((JScrollPane) listThing).getViewport().getView();
    
    // Display the filtered odd numbers in the list field
    if (oddNumbers.length() > 0) {
        textArea.setText(oddNumbers.toString()); // Set text to JTextArea
    } else {
        textArea.setText("No odd numbers found."); // Display an error message if none found
    }
    }//GEN-LAST:event_btnOActionPerformed

    private void btnCLRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCLRActionPerformed
        // TODO add your handling code here:
        updateListDisplay();// Update list display to reflect changes after clearing
        textResult.setText("Filters cleared.");  // Display confirmation message
        textResult.setForeground(Color.GREEN);
    }//GEN-LAST:event_btnCLRActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(integerSums.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(integerSums.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(integerSums.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(integerSums.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new integerSums().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAll;
    private javax.swing.JButton btnAverage;
    private javax.swing.JButton btnCLR;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnClearInt;
    private javax.swing.JButton btnE;
    private javax.swing.JButton btnEven;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnList;
    private javax.swing.JButton btnO;
    private javax.swing.JButton btnOdd;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JScrollPane listThing;
    private javax.swing.JTextField textInt;
    private javax.swing.JTextField textResult;
    // End of variables declaration//GEN-END:variables
}
